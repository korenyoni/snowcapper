// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  metadata: true
//  asset-dir: true
//  restore: true
// sources:
//  config.yaml

package main

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64
	mode os.FileMode
	time time.Time

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return a.mode
}

func (a *asset) ModTime() time.Time {
	return a.time
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"config.yaml": &asset{
		name: "config.yaml",
		data: "" +
			"\x74\x91\xdd\x8e\xdb\x20\x10\x85\xef\xfd\x14\x23\xee\x17\xb3\x55\xb7\xad\x90\xf6\x59\xac\x59\x98" +
			"\xd8\x28\xfc\x09\x26\x51\xd3\x9f\x77\xaf\x6c\x1c\xcb\x89\xbb\xf8\xc2\x9a\xc3\xc7\x39\xa3\x99\x8c" +
			"\xe6\x8c\x23\x55\xdd\x01\xbc\x40\xc4\x40\x1a\xae\x78\xf1\xdc\x01\x00\x7c\xb8\x88\xc5\xb5\xdb\xf9" +
			"\x1c\x89\xf9\x84\x64\x49\x83\xfa\xfe\xf6\xb6\x49\xb5\x18\x0d\x13\x73\xae\xba\xef\x0b\x79\xc2\x4a" +
			"\x55\x4e\x58\x27\x67\x52\xc9\xd2\xa4\xd0\x2f\x26\xbd\x92\xaf\x4a\xaa\x56\x0c\xad\x18\xbc\x8b\x97" +
			"\x9f\x03\x06\xfb\xed\xab\xfc\xe5\xf2\xe6\x7a\x4a\x25\x20\x6b\xb8\x6b\x27\xe7\xf7\xbd\x65\xe4\x49" +
			"\x43\x4f\x6c\x56\x6f\x93\xe2\xc9\x8d\x72\x32\xfe\xd0\xab\x52\x9b\x64\x52\x64\x8a\xac\xe1\xcf\x26" +
			"\x01\x54\x4e\x05\x47\x02\x31\x67\x08\xf8\xbd\xbb\x82\x25\x68\xfe\xbf\x83\xe8\x43\xe4\x35\xcd\x22" +
			"\xa3\xd8\x71\x7f\xbb\x5d\xe1\x5d\x65\x8a\x54\x40\xb0\xc9\xcf\x7e\x68\x6d\xa1\x5a\x61\xf5\x54\x72" +
			"\xf9\xf4\x8f\x2f\x4a\x89\x07\x90\x7d\x1d\xac\xab\xf8\xe1\x09\xde\xe1\xf5\xb3\xb0\x15\x19\x82\x4f" +
			"\xe6\x3c\x3b\x72\xb9\x50\x73\xaa\x54\xae\xce\xec\xa7\xb6\xec\xf8\xf6\xbc\x53\x2c\xe3\xc6\x34\x4e" +
			"\xcc\x4f\xa9\x88\x47\xf1\xa5\xcd\xf8\xff\x53\x6f\xac\x8b\x8e\x77\x79\x7c\xcb\xa4\x21\x65\x8a\xc5" +
			"\x1c\x77\xb0\xef\xe2\xce\x9a\x14\x02\x46\x7b\x84\xc9\x4c\xa9\xbd\x00\x57\xc1\xc5\xca\xe8\x3d\x59" +
			"\xd9\xfd\x0b\x00\x00\xff\xff",
		size: 726,
		mode: 0664,
		time: time.Unix(1527446541, 718433853),
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"config.yaml": bintree{},
}
