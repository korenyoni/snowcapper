// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  metadata: true
//  asset-dir: true
//  restore: true
// sources:
//  config.snc

package main

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64
	mode os.FileMode
	time time.Time

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return a.mode
}

func (a *asset) ModTime() time.Time {
	return a.time
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"config.snc": &asset{
		name: "config.snc",
		data: "" +
			"\x74\x92\xdd\x6e\xe3\x20\x10\x85\xef\xf3\x14\x23\xdf\xd7\x26\xfe\x8d\x90\xfa\x2c\xd6\x00\x43\x8c" +
			"\x8a\xc1\x82\x49\xb5\xdd\x9f\x77\x5f\x39\x4e\x2d\xb7\xd9\xc5\x17\xd6\x1c\x3e\xce\x81\x81\x05\xf5" +
			"\x1b\x5e\x29\xcb\x13\xc0\x0b\x04\x9c\x49\xc2\x3b\xde\x3c\x9f\x00\x00\x94\x0b\x98\xdc\x36\xbb\x8e" +
			"\x67\x62\x1d\x73\x34\x24\x41\x0c\x5d\xb7\x4b\x39\x69\x09\x13\xf3\x92\x65\x55\x25\xf2\x84\x99\x72" +
			"\x39\x61\x9e\x9c\x8e\x69\x29\x75\x9c\xab\xbb\x49\x25\xca\xb3\x28\xc5\x56\x8c\x5b\x31\x7a\x17\x6e" +
			"\x3f\x46\x9c\x4d\xdf\x96\x3f\xdd\x72\x74\x1d\x57\x0f\x09\xd8\xab\x56\xf5\x46\x9d\x9b\xda\x36\x4a" +
			"\x51\x6f\x95\x1a\x06\x3b\xf4\x75\x7d\xb1\x16\xdb\x4e\x99\xae\xc3\x0e\xcf\xa8\x2e\x8d\xb5\xa2\x6d" +
			"\x74\xad\xfb\xbe\xd3\x8d\xed\x70\x68\xdb\xdd\xd2\xc6\x34\x23\x4b\xf8\x8c\xb1\xce\x1f\x8f\xbb\x20" +
			"\x4f\x12\x2a\x62\xfd\xd8\xae\x8e\xc1\xba\x6b\x39\x69\xff\x74\x7c\x21\x76\x49\xc7\xc0\x14\x58\xc2" +
			"\xef\x5d\x02\xc8\x1c\x13\x5e\x09\x8a\x35\xa3\x80\x5f\x87\x29\xb8\x07\xad\xff\x57\x28\xaa\x39\xf0" +
			"\x23\xcd\x20\x63\x71\xe0\xfe\x9c\x0e\x85\x77\x99\x29\x50\x82\x82\xf5\xf2\xdd\x0f\x8d\x49\x94\x33" +
			"\x3c\x3c\x45\x79\xff\xe4\xa5\x16\xa2\xf8\x02\xb2\xcf\xa3\x71\x19\x95\x27\x78\x85\xf3\xff\xc2\x1e" +
			"\xc8\x38\xfb\xa8\xdf\x56\x47\x4e\x37\xda\x9c\x32\xa5\x77\xa7\x8f\x5d\xbb\x3f\x9b\x8f\xef\xcf\x04" +
			"\xd3\x75\x67\x36\xae\x58\x97\x52\x2a\xbe\x8a\x2f\x5b\x8f\xff\xdd\xf5\x8d\x75\xc1\xf1\x21\x8f\x3f" +
			"\x16\x92\x10\x17\x0a\x49\x3f\xdf\xc1\x71\x17\x9f\xac\x8e\xf3\x8c\xc1\x3c\xc3\xa4\xa7\xb8\xad\x00" +
			"\x97\xc1\x85\xcc\xe8\x3d\x99\xf2\xf4\x37\x00\x00\xff\xff",
		size: 809,
		mode: 0664,
		time: time.Unix(1532609228, 323338577),
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"config.snc": bintree{},
}
