// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  metadata: true
//  asset-dir: true
//  restore: true
// sources:
//  config.yaml

package main

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64
	mode os.FileMode
	time time.Time

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return a.mode
}

func (a *asset) ModTime() time.Time {
	return a.time
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"config.yaml": &asset{
		name: "config.yaml",
		data: "" +
			"\xa4\x53\xc1\x6a\x1b\x31\x10\xbd\xfb\x2b\xa6\xee\x1e\xda\x83\x56\x2e\x94\x1e\x16\x42\x09\xd4\xc7" +
			"\xa4\xd0\xd0\x5b\xc1\xc8\xd2\x78\x57\x58\x3b\x12\xa3\xd9\x34\x6d\x9a\x7f\x2f\xeb\x8d\xc3\x9a\xda" +
			"\xcd\xc2\xce\x49\x7a\xf3\xde\x63\x18\x3d\x25\x63\xf7\xa6\xc6\x5c\x2d\x00\x14\x90\x69\xb1\x82\x7b" +
			"\xd3\x05\x59\x00\x00\x6c\x3d\x19\xf6\x43\xb7\xaf\x7f\x19\x7d\x65\xb6\x15\x34\x22\x29\x57\x5a\x33" +
			"\x06\x34\x19\x73\xd9\x98\xdc\x78\x1b\x39\x95\x36\xb6\xfa\xa0\xd0\xab\xf2\xc3\xaa\x5c\x0d\x97\xcd" +
			"\x70\xd9\x04\x4f\xdd\xc3\xc6\xb4\xee\xd3\xc7\xf2\xb7\x4f\x63\x57\xf9\x95\xb0\x82\x23\xb8\xf3\x61" +
			"\x3c\x49\x32\xd2\x54\xa0\x51\xac\xf6\xe4\xa5\x74\xfa\x74\x2a\x1b\x49\x90\xa4\x82\x3f\x2f\x10\xc0" +
			"\xdb\x37\x3a\x6f\x3d\xe9\x98\x90\xd8\x2a\xee\x68\x31\xea\xde\x5e\xdf\xac\xaf\x4e\x5d\x00\xbe\x5c" +
			"\xaf\x6f\xbe\xde\x5e\xe9\x2e\xb3\xee\xa5\x45\xcf\x1a\xab\x1c\x26\x24\xf7\xee\x3d\x3c\x8e\xc0\x63" +
			"\x11\xa2\x03\x42\x39\xd3\x32\x3b\x41\x86\x9d\x67\xfc\x69\x42\x18\x11\x9e\xc6\xee\x59\x0c\xcb\x05" +
			"\x73\xdc\x62\xed\x09\x96\x77\x3d\xc7\x53\x0d\xc5\x63\x3f\xdc\xd3\xf2\x0c\xf7\xc4\x4f\x65\x89\x49" +
			"\x39\x83\x6d\x24\x50\xea\x80\xc1\x8f\xff\xa8\x8e\xa5\xd4\xd6\xd8\x7d\xcd\xb1\x23\x37\x51\xd0\x9a" +
			"\x3d\xaa\xe4\x5d\xff\x7c\xa0\x5e\x4e\xfa\xde\xb0\xe6\xee\x79\x9f\x65\xf2\x53\xfd\xb2\x38\x64\x86" +
			"\xe5\xc1\x20\xc4\xfa\xd9\x20\xc4\x7a\x39\xdd\x21\x76\x32\xc7\xa1\xcb\xc8\x50\x7c\xbf\x5b\x7f\x9b" +
			"\x28\xc0\x07\xb4\x50\x0c\x51\x9a\x28\x99\x46\xb3\x91\x76\xbe\x1e\xbe\xc1\xf0\xc7\x06\xa4\x6c\x6c" +
			"\x38\x97\x18\x24\x07\xc5\xe7\xcb\x61\x8b\x09\x5e\x0d\x5b\x4c\x69\x56\xd8\x62\x9a\xb8\x82\xd9\x59" +
			"\x99\xf5\x4e\x13\xd7\xf7\x37\x00\x00\xff\xff",
		size: 1346,
		mode: 0664,
		time: time.Unix(1526237140, 463905066),
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"config.yaml": bintree{},
}
